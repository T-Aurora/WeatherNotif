version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "echo", "ruok", "|", "nc", "localhost", "2181", "|", "grep", "imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CREATE_TOPICS: "WAlerts:3:1,BakedData:3:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  weatherdb:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: wdb
      MYSQL_USER: wnotif
      MYSQL_PASSWORD: wnotif
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql

  redis:
    image: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/var/lib/redis

  wnotif:
    build: ./WNotif
    depends_on:
      weatherdb:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
    ports:
      - "5000:5000"
    environment:
      MYSQLHOST: "weatherdb"
      KAFKAHOST: "kafka:9092"
    restart: on-failure

  tgramnotif:
    build: ./TelegramNotif
    depends_on:
      weatherdb:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
      wnotif:
        condition: service_started
    ports:
      - "8540:8540"
    environment:
      KAFKAHOST: "kafka:9092"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_DB: "1"
      APIHOST: "wnotif"
    restart: on-failure

  apihandler:
    build: ./APIHandler
    depends_on:
      weatherdb:
        condition: service_started
      redis:
        condition: service_started
      kafka:
        condition: service_started
      wnotif:
        condition: service_started
    ports:
      - "12040:12040"
    environment:
      KAFKAHOST: "kafka:9092"
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
      REDIS_DB: "0"
      APIHOST: "wnotif"
    restart: on-failure

volumes:
  db_data:
  redis_data:

